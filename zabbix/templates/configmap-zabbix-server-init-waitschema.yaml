{{- if and .Values.zabbixServer.enabled (gt (.Values.zabbixServer.replicaCount | int) 1) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zabbix.fullname" . }}-waitdbschema-script
  labels:
    app: {{ template "zabbix.fullname" . }}-waitdbschema-script
    app.kubernetes.io/name: waitdbschema-script
    helm.sh/chart: {{ include "zabbix.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}-waitdbschema-script
    app.kubernetes.io/managed-by: {{ .Release.Service }}-waitdbschema-script
data:
  wait_db_schema.sh: |
    #!/bin/bash

    set -o pipefail

    set +e

    # Script trace mode
    if [ "${DEBUG_MODE,,}" == "true" ]; then
        set -o xtrace
    fi

    # Default directories
    # User 'zabbix' home directory
    ZABBIX_USER_HOME_DIR="/var/lib/zabbix"
    # Configuration files directory
    ZABBIX_ETC_DIR="/etc/zabbix"

    # usage: file_env VAR [DEFAULT]
    # as example: file_env 'MYSQL_PASSWORD' 'zabbix'
    #    (will allow for "$MYSQL_PASSWORD_FILE" to fill in the value of "$MYSQL_PASSWORD" from a file)
    # unsets the VAR_FILE afterwards and just leaving VAR
    file_env() {
        local var="$1"
        local fileVar="${var}_FILE"
        local defaultValue="${2:-}"

        if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
            echo "**** Both variables $var and $fileVar are set (but are exclusive)"
            exit 1
        fi

        local val="$defaultValue"

        if [ "${!var:-}" ]; then
            val="${!var}"
            echo "** Using ${var} variable from ENV"
        elif [ "${!fileVar:-}" ]; then
            if [ ! -f "${!fileVar}" ]; then
                echo "**** Secret file \"${!fileVar}\" is not found"
                exit 1
            fi
            val="$(< "${!fileVar}")"
            echo "** Using ${var} variable from secret file"
        fi
        export "$var"="$val"
        unset "$fileVar"
    }

    db_tls_params() {
        local result=""

        if [ -n "${ZBX_DBTLSCONNECT}" ]; then
            ssl_mode=${ZBX_DBTLSCONNECT//verify_full/verify_identity}
            result="--ssl-mode=$ssl_mode"

            if [ -n "${ZBX_DBTLSCAFILE}" ]; then
                result="${result} --ssl-ca=${ZBX_DBTLSCAFILE}"
            fi

            if [ -n "${ZBX_DBTLSKEYFILE}" ]; then
                result="${result} --ssl-key=${ZBX_DBTLSKEYFILE}"
            fi

            if [ -n "${ZBX_DBTLSCERTFILE}" ]; then
                result="${result} --ssl-cert=${ZBX_DBTLSCERTFILE}"
            fi
        fi

        echo $result
    }

    # Check prerequisites for PostgreSQL database
    check_variables_mysql() {
        if [ ! -n "${DB_SERVER_SOCKET}" ]; then
            : ${DB_SERVER_HOST:="my-release-mariadb-galera"}
            : ${DB_SERVER_PORT:="3306"}
        fi

        USE_DB_ROOT_USER=false
        CREATE_ZBX_DB_USER=false
        file_env MYSQL_USER
        file_env MYSQL_PASSWORD

        file_env MYSQL_ROOT_USER
        file_env MYSQL_ROOT_PASSWORD

        MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-"d2brjad8bb"}

        if [ ! -n "${MYSQL_USER}" ] && [ "${MYSQL_RANDOM_ROOT_PASSWORD,,}" == "true" ]; then
            echo "**** Impossible to use MySQL server because of unknown Zabbix user and random 'root' password"
            exit 1
        fi

        if [ ! -n "${MYSQL_USER}" ] && [ ! -n "${MYSQL_ROOT_PASSWORD}" ] && [ "${MYSQL_ALLOW_EMPTY_PASSWORD,,}" != "true" ]; then   
            echo "*** Impossible to use MySQL server because 'root' password is not defined and it is not empty"
            exit 1
        fi

        if [ "${MYSQL_ALLOW_EMPTY_PASSWORD,,}" == "true" ] || [ -n "${MYSQL_ROOT_PASSWORD}" ]; then
            USE_DB_ROOT_USER=true
            DB_SERVER_ROOT_USER=${MYSQL_ROOT_USER:-"root"}
            DB_SERVER_ROOT_PASS=${MYSQL_ROOT_PASSWORD:-"d2brjad8bb"}
        fi

        [ -n "${MYSQL_USER}" ] && [ "${USE_DB_ROOT_USER}" == "true" ] && CREATE_ZBX_DB_USER=true

        # If root password is not specified use provided credentials
        : ${DB_SERVER_ROOT_USER:=${MYSQL_USER}}
        [ "${MYSQL_ALLOW_EMPTY_PASSWORD,,}" == "true" ] || DB_SERVER_ROOT_PASS=${DB_SERVER_ROOT_PASS:-${MYSQL_PASSWORD}}
        DB_SERVER_ZBX_USER=${MYSQL_USER:-"root"}
        DB_SERVER_ZBX_PASS=${MYSQL_PASSWORD:-"d2brjad8bb"}

        DB_SERVER_DBNAME=${MYSQL_DATABASE:-"zabbix"}

        if [ ! -n "${DB_SERVER_SOCKET}" ]; then
            mysql_connect_args="-h ${DB_SERVER_HOST} -P ${DB_SERVER_PORT}"
        else
            mysql_connect_args="-S ${DB_SERVER_SOCKET}"
        fi
    }

    check_db_connect_mysql() {
        echo "********************"
        if [ ! -n "${DB_SERVER_SOCKET}" ]; then
            echo "* DB_SERVER_HOST: ${DB_SERVER_HOST}"
            echo "* DB_SERVER_PORT: ${DB_SERVER_PORT}"
        else
            echo "* DB_SERVER_SOCKET: ${DB_SERVER_SOCKET}"
        fi
        echo "* DB_SERVER_DBNAME: ${DB_SERVER_DBNAME}"
        if [ "${DEBUG_MODE,,}" == "true" ]; then
            if [ "${USE_DB_ROOT_USER}" == "true" ]; then
                echo "* DB_SERVER_ROOT_USER: ${DB_SERVER_ROOT_USER}"
                echo "* DB_SERVER_ROOT_PASS: ${DB_SERVER_ROOT_PASS}"
            fi
            echo "* DB_SERVER_ZBX_USER: ${DB_SERVER_ZBX_USER}"
            echo "* DB_SERVER_ZBX_PASS: ${DB_SERVER_ZBX_PASS}"
        fi
        echo "********************"

        WAIT_TIMEOUT=5

        ssl_opts="$(db_tls_params)"

        export MYSQL_PWD="${DB_SERVER_ROOT_PASS}"

        while [ ! "$(mysqladmin ping $mysql_connect_args -u ${DB_SERVER_ROOT_USER} \
                    --silent --connect_timeout=10 $ssl_opts)" ]; do
            echo "**** MySQL server is not available. Waiting $WAIT_TIMEOUT seconds..."
            sleep $WAIT_TIMEOUT
        done

        unset MYSQL_PWD
    }

    mysql_query() {
        query=$1
        local result=""

        ssl_opts="$(db_tls_params)"

        export MYSQL_PWD="${DB_SERVER_ROOT_PASS}"

        result=$(mysql --silent --skip-column-names $mysql_connect_args \
                -u ${DB_SERVER_ROOT_USER} -e "$query" $ssl_opts)

        unset MYSQL_PWD

        echo $result
    }

    check_db_user_mysql() {
        WAIT_TIMEOUT=5
        while true :
        do
            DB_AMOUNT_USERS=$(mysql_query "SELECT COUNT(*) FROM ${DB_SERVER_DBNAME}.users;")
            if [ ${DB_AMOUNT_USERS} ]; then
                echo "** amount of users in users table is ${DB_AMOUNT_USERS}, letting the Zabbix Server container start"
                break
            fi
            echo "**** DB amount of entries in user table is ${DB_AMOUNT_USERS}. Waiting $WAIT_TIMEOUT seconds..."
            sleep $WAIT_TIMEOUT
        done
    }

    check_db_schema_mysql() {
        WAIT_TIMEOUT=5
        while true :
        do
            DBVERSION_TABLE_EXISTS=$(mysql_query "SELECT 1 FROM information_schema.tables WHERE table_schema='${DB_SERVER_DBNAME}' and table_name = 'dbversion'")

            if [ -n "${DBVERSION_TABLE_EXISTS}" ]; then
                echo "** Table '${DB_SERVER_DBNAME}.dbversion' exists."
                ZBX_DB_VERSION=$(mysql_query "SELECT mandatory FROM ${DB_SERVER_DBNAME}.dbversion")
            fi
            if [ -n "${ZBX_DB_VERSION}" ]; then
                echo "** dbversion is ${ZBX_DB_VERSION}, continuing with next step of checks..."
                break
            fi
            echo "**** DB Version not found yet, assuming DB schema is not yet created. Waiting $WAIT_TIMEOUT seconds..."
            sleep $WAIT_TIMEOUT
        done
    }

    wait_for_db_and_schema() {
        echo "** waiting for Zabbix DB to be operational to start Zabbix server container"
        check_variables_mysql
        check_db_connect_mysql
        check_db_schema_mysql
        check_db_user_mysql
    }

    wait_for_db_and_schema
{{- end }}
